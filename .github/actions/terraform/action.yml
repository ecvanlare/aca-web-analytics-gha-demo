name: 'Terraform Operations'
description: 'Reusable Terraform operations (init, plan, apply, destroy, validate)'

inputs:
  terraform_command:
    description: 'Terraform command to run (init, plan, apply, destroy, validate)'
    required: true
  auto_approve:
    description: 'Auto approve for apply/destroy commands'
    required: false
    default: 'false'
  working_directory:
    description: 'Working directory for Terraform'
    required: false
    default: 'terraform/'

runs:
  using: composite
  steps:
    - name: Checkout repository code
      uses: actions/checkout@v4

    - name: Authenticate with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.12.1

    - name: Terraform ${{ inputs.terraform_command }}
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
      run: |
        echo "::group::Terraform ${{ inputs.terraform_command }}"
        
        # Initialize Terraform
        terraform init \
          -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.CONTAINER_NAME }}" \
          -backend-config="key=${{ env.TFSTATE_KEY }}"
        
        # Run the specified command
        if [ "${{ inputs.terraform_command }}" = "plan" ]; then
          terraform plan -out=tfplan
        elif [ "${{ inputs.terraform_command }}" = "apply" ]; then
          if [ "${{ inputs.auto_approve }}" = "true" ]; then
            terraform apply -auto-approve
          else
            terraform apply tfplan
          fi
        elif [ "${{ inputs.terraform_command }}" = "destroy" ]; then
          if [ "${{ inputs.auto_approve }}" = "true" ]; then
            terraform destroy -auto-approve
          else
            terraform destroy
          fi
        elif [ "${{ inputs.terraform_command }}" = "validate" ]; then
          terraform validate
        fi
        
        echo "::endgroup::"

    - name: Generate Terraform Plan Output
      if: inputs.terraform_command == 'plan'
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: terraform show tfplan > tfplan.txt

    - name: Upload Terraform Plan
      if: inputs.terraform_command == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ inputs.working_directory }}/tfplan

    - name: Upload Terraform Plan Output
      if: inputs.terraform_command == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-output
        path: ${{ inputs.working_directory }}/tfplan.txt
